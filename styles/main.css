@charset "UTF-8";
body {
  font-size: clamp(0.875rem, 0.7794117647rem + 0.3921568627vw, 1.25rem);
  font-family: var(--font-family-base);
  color: var(--color-dark);
  font-weight: 400;
  background-color: var(--color-light);
}

a,
button,
input,
textarea,
svg {
  border: 0;
  margin: 0;
  padding: 0;
  transition-duration: var(--transition-duration);
}

a {
  text-decoration: none;
}

h1, .h1 {
  font-size: clamp(1.5rem, 0.9264705882rem + 2.3529411765vw, 3.75rem);
}

h2, .h2 {
  font-size: clamp(1.25rem, 1.0588235294rem + 0.7843137255vw, 2rem);
}

h3, .h3 {
  font-size: clamp(1.25rem, 1.1862745098rem + 0.2614379085vw, 1.5rem);
}

:root {
  --font-family-base: "Montserrat", sans-serif;
  --color-black: #27272A;
  --color-grey-dark: #696969;
  --color-grey-dark-light: #E5E7EB;
  --color-light: #FCFBFA;
  --color-lavender: #7E3AF2;
  --color-lavender-red: #E02424;
  --container-desktop-margin: 5.3125rem;
  --container-tablet-margin: 2.4375rem;
  --container-mobile-margin: 0.9375rem;
  --button-hover-color: #6C2BD9;
  --button-border-radius: 3.125rem;
  --button-base-width: 11.75rem;
  --button-base-height: 3.125rem;
  --button-base-padding: 0.8125rem 1.5625rem;
  --button-mobile-width: 8.6875rem;
  --button-mobile-height: 2.4375rem;
  --button-mobile-padding: 0.5625rem 0.8125rem;
  --input-base-width: 20.25rem;
  --input-base-height: 3.4375rem;
  --input-base-padding: 0.8125rem 1.25rem;
  --textarea-base-width: 41.75rem;
  --textarea-base-height: 10.125rem;
  --textarea-base-padding: 0.8125rem 1.25rem;
  --transition-duration: 0.2s;
}

.container {
  --tempValueForMargin: var(--container-desktop-margin);
  width: calc(100% - var(--tempValueForMargin));
  margin-inline: auto;
}
@media (width <= 63.99875rem) {
  .container {
    --tempValueForMargin: var(--container-tablet-margin);
  }
}
@media (width <= 47.99875rem) {
  .container {
    --tempValueForMargin: var(--container-mobile-margin);
  }
}

@media (width > 47.99875rem) {
  .visible-mobile {
    display: none !important;
  }
}

@media (width <= 47.99875rem) {
  .hidden-mobile {
    display: none !important;
  }
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

@font-face {
  font-family: "Montserrat";
  src: url("../fonts/Montserrat-Regular.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Montserrat";
  src: url("../fonts/Montserrat-SemiBold.woff2") format("woff2");
  font-weight: 800;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Montserrat";
  src: url("../fonts/Montserrat-Bold.woff2") format("woff2");
  font-weight: 900;
  font-style: normal;
  font-display: swap;
}
/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Убираем скачок интерфейса по горизонтали
    при появлении / исчезновении скроллбара
   */
}

/**
  Плавный скролл
 */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут fill со значением 'none' или начинается с 'url')
 */
:where([fill]:not([fill=none],
[fill^=url])) {
  fill: currentColor;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут stroke со значением 'none')
 */
:where([stroke]:not([stroke=none],
[stroke^=url])) {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Приведение рамок таблиц в классический 'collapse' вид
 */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
.button {
  --tempValueForBorderSize: rem(3);
  color: var(--color-light);
  font-size: 1rem;
  display: flex;
  align-items: center;
  column-gap: 0.75rem;
  width: calc(var(--button-base-width) + var(--tempValueForBorderSize) * 2);
  height: calc(var(--button-base-height) + var(--tempValueForBorderSize) * 2);
  padding: var(--button-base-padding);
  border: var(--tempValueForBorderSize) solid red;
  border-radius: var(--button-border-radius);
  background-color: var(--color-lavender);
}
@media (width <= 47.99875rem) {
  .button {
    width: calc(var(--button-mobile-width) + var(--tempValueForBorderSize) * 2);
    height: calc(var(--button-mobile-height) + var(--tempValueForBorderSize) * 2);
    padding: var(--button-mobile-padding);
  }
}
@media (any-hover: hover) {
  .button:hover {
    background-color: var(--button-hover-color);
  }
}
@media (any-hover: none) {
  .button:active {
    background-color: var(--button-hover-color);
  }
}
.button:active {
  border-color: #CABFFD;
}
.button__icon {
  display: flex;
  justify-content: center;
  align-items: center;
}

.header__inner {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-block: 0.9375rem;
}
.header__icon-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
}
.header__list {
  display: flex;
  align-items: center;
  column-gap: 1.5rem;
}
.header__item {
  display: flex;
  height: 1.5rem;
  background-color: transparent;
}
.header__link {
  color: var(--color-dark);
  height: 100%;
}
.header__link.is-active {
  color: var(--color-lavender);
  cursor: default;
}

/*# sourceMappingURL=main.css.map */
